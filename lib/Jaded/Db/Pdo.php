<?php
/**
 * Class for connecting to databases via PDO
 */
class Jaded_Db_Pdo extends Jaded_Db
{
	protected $sDsn = '';
	protected $oDb = null;

	//////////////////////////////////////////////////////////////////////
	// PUBLIC ///////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////

	/**
	 * Build the connection, but do not connect until needed
	 * @param string $sDsn
	 */
	public function __construct($sDsn)
	{
		$this->sDsn = $sDsn;
	}

	/**
	 * Execute a SQL insert, update, or delete query
	 * @param string $sSql
	 * @param array  $aParams
	 * @return bool int number of affected rows
	 */
	public function execute($sSql, $aParams=array())
	{
		$oStmt = $this->exec($sSql, $aParams);
		return $oStmt->rowCount();
	}

	/**
	 * Return the results of a select query
	 * @param string $sSql
	 * @param array  $aParams
	 * @return array each element is an array representing a data row
	 */
	public function getAll($sSql, $aParams=array())
	{
		$oStmt = $this->exec($sSql, $aParams);
		return $oStmt->fetchAll();
	}

	/**
	 * Retrieve the last id generated by an insert
	 * @return mixed
	 */
	public function getLastInsertId()
	{
		$this->connect();
		return $this->oDb->lastInsertId();
	}

	/**
	 * Return the first column of the first row from the results of a select query
	 * @param string $sSql
	 * @param array  $aParams
	 * @return string
	 */
	public function getOne($sSql, $aParams=array())
	{
		$aRow = $this->getRow($sSql, $aParams);
		return array_shift($aRow);
	}

	/**
	 * Return the first row from the results of a select query
	 * @param string $sSql
	 * @param array  $aParams
	 * @return array a single data row
	 */
	public function getRow($sSql, $aParams=array())
	{
		$oStmt = $this->exec($sSql, $aParams);
		$aRow = $oStmt->fetch();
		return ($aRow) ? $aRow : array();
	}

	//////////////////////////////////////////////////////////////////////
	// PROTECTED ////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////

	/**
	 * Lazy connection
	 */
	protected function connect()
	{
		if ($this->oDb == null) {
			$aDsn = parse_url($this->sDsn);
			$sScheme = $aDsn['scheme'];
			$sHost = $aDsn['host'];
			$sPort = isset($aDsn['port']) ? $aDsn['port'] : 3306;
			$sDbName = trim($aDsn['path'], '/');
			$sUser = $aDsn['user'] ? $aDsn['user'] : '';
			$sPass = $aDsn['pass'] ? $aDsn['pass'] : '';
		
			$sConnDsn = "{$sScheme}:host={$sHost};port={$sPort};dbname={$sDbName}";
			$this->oDb = new PDO($sConnDsn, $sUser, $sPass);
			$this->oDb->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
		}
	}

	/**
	 * Execute the given query with params
	 * @param string $sSql
	 * @param array  $aParams
	 * @return object PDOStatement
	 */
	protected function exec($sSql, $aParams)
	{
		$this->connect();
		$oStmt = $this->oDb->prepare($sSql);
		$oStmt->execute($aParams);
		$oStmt->setFetchMode(PDO::FETCH_ASSOC);
		return $oStmt;
	}
}
